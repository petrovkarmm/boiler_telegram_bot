from aiogram.enums import ParseMode
from aiogram_dialog import Window, DialogManager, ShowMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Format
from aiogram.types import Message

from boiler_telegram_bot.main_menu.boiler_dialog.boiler_dialog_states import BoilerDialog
from db_configuration.models.user import User
from main_menu.boiler_dialog.utils import normalize_phone_number
from main_menu.boiler_registration_dialog.utils import is_valid_inn_organization


async def feedback_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    user_answer = message.text
    if user_answer:
        if len(user_answer) > 1000:
            await message.answer(
                text=(
                    "‚ö†Ô∏è <b>–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî <b>1000 —Å–∏–º–≤–æ–ª–æ–≤</b>.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚úÇÔ∏è"
                ),
            )
        else:
            dialog_manager.dialog_data['user_answer'] = user_answer
            await dialog_manager.switch_to(
                BoilerDialog.boiler_accept_feedback
            )
    else:
        await message.answer(
            text='ü§î –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...'
        )


async def technical_problem_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    user_technical_problem = message.text
    if user_technical_problem:
        if len(user_technical_problem) >= 100:
            await message.answer(
                text=(
                    "‚ö†Ô∏è <b>–¢–µ–º–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî <b>100 —Å–∏–º–≤–æ–ª–æ–≤</b>.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚úÇÔ∏è"
                ),
            )
        else:
            dialog_manager.dialog_data['technical_problem'] = user_technical_problem
            await dialog_manager.switch_to(
                BoilerDialog.boiler_repair_description
            )
    else:
        await message.answer(
            text='ü§î –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...'
        )


async def technical_problem_description_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    user_technical_problem_description = message.text
    if user_technical_problem_description:
        if len(user_technical_problem_description) >= 2000:
            await message.answer(
                text=(
                    "‚ö†Ô∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî <b>2000 —Å–∏–º–≤–æ–ª–æ–≤</b>.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚úÇÔ∏è"
                ),
                parse_mode=ParseMode.HTML
            )
        else:
            dialog_manager.dialog_data['technical_problem_description'] = user_technical_problem_description
            await dialog_manager.switch_to(
                BoilerDialog.boiler_repair_video_or_photo
            )
    else:
        await message.answer(
            text='ü§î –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...'
        )


async def new_organization_itn_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    inn = message.text.strip()

    if not is_valid_inn_organization(inn):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù –∏–∑ 10 —Ü–∏—Ñ—Ä.")
        return

    telegram_id = str(message.from_user.id)

    User.update_user_field(
        telegram_id=telegram_id, key='organization_itn', new_value=inn
    )

    await dialog_manager.switch_to(
        BoilerDialog.boiler_profile_edit_menu
    )


async def new_organization_name_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    telegram_id = str(message.from_user.id)
    new_organization_name = message.text

    User.update_user_field(
        telegram_id=telegram_id,
        key='organization_name',
        new_value=new_organization_name
    )

    await dialog_manager.switch_to(
        BoilerDialog.boiler_profile_edit_organization_name
    )


async def new_name_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    telegram_id = str(message.from_user.id)
    new_name = message.text

    User.update_user_field(
        telegram_id=telegram_id,
        key='name',
        new_value=new_name
    )

    await dialog_manager.switch_to(
        BoilerDialog.boiler_profile_edit_organization_name
    )


async def new_phone_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    user_phone = message.text

    validate_user_phone = await normalize_phone_number(
        user_phone
    )

    if validate_user_phone:

        telegram_id = str(message.from_user.id)

        User.update_user_field(
            telegram_id=telegram_id, key='phone', new_value=user_phone
        )

        await dialog_manager.switch_to(
            BoilerDialog.boiler_profile_edit_menu
        )

    else:
        await message.answer(
            text="‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                 "üì± <code>+7XXXXXXXXXX</code> –∏–ª–∏ <code>8XXXXXXXXXX</code>\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üëá",
            parse_mode=ParseMode.HTML
        )


async def content_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    if message.video:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ.")
    elif message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")


async def address_getter(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
):
    user_address = message.text

    dialog_manager.dialog_data['user_address'] = user_address

    await dialog_manager.switch_to(
        BoilerDialog.boiler_repair_accept_request
    )
