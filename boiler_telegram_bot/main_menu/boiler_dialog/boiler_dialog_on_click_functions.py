import asyncio
import random
from pprint import pprint
from typing import Any

from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.kbd import Button, ManagedCounter, ManagedRadio

from boiler_telegram_bot.main_menu.boiler_dialog.boiler_dialog_states import BoilerDialog
from db_configuration.models.technical_problem import TechnicalProblem
from db_configuration.models.feedback import Feedback
from db_configuration.models.user import User
from main_menu.boiler_registration_dialog.boiler_registration_states import BoilerRegistrationDialog


async def get_barista_count_and_switch(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    barista_counter: ManagedCounter = dialog_manager.find('barista_counter')

    barista_value = barista_counter.get_value()  # int —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24
    dialog_manager.dialog_data['barista_value'] = barista_value
    await dialog_manager.switch_to(
        BoilerDialog.boiler_barista_training_accept_request
    )


async def save_rent_and_switch(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    dialog_manager.dialog_data['button_click'] = '–ê—Ä–µ–Ω–¥–∞'
    await dialog_manager.switch_to(
        BoilerDialog.boiler_rent
    )


async def rent_radio_set(
        event: CallbackQuery,
        widget: ManagedRadio,
        dialog_manager: DialogManager,
        item_id: Any,

):
    dialog_manager.dialog_data['radio_get_set'] = True


async def save_tech_cat_and_switch(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    dialog_manager.dialog_data['button_click'] = '–ü–æ–¥–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏'
    await dialog_manager.switch_to(
        BoilerDialog.boiler_technical_catalog_type_choose
    )


async def save_barista_training_and_switch(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    dialog_manager.dialog_data['button_click'] = '–û–±—É—á–µ–Ω–∏–µ –±–∞—Ä–∏—Å—Ç–∞'
    await dialog_manager.switch_to(
        BoilerDialog.boiler_barista_training_choose_count
    )


async def confirm_sending_call_technician(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    user_id = str(callback.from_user.id)

    user_data = User.get_user_by_telegram_id(
        user_id
    )

    if user_data:
        user_phone = user_data['phone']
        user_name = user_data['name']
        organization_itn = user_data['organization_itn']
        organization_name = user_data['organization_name']

        technical_problem = dialog_manager.dialog_data['technical_problem']
        technical_problem_description = dialog_manager.dialog_data['technical_problem_description']
        user_address = dialog_manager.dialog_data['user_address']
        media_info = '–ú–µ–¥–∏–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'

        #  TODO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–æ–π.

        await callback.message.answer(
            text=(
                "<b>üì§ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ CRM —Å–∏—Å—Ç–µ–º—É...</b>\n\n"
                f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_phone}\n"
                f"üõ† <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {technical_problem_description}\n"
                f"‚öôÔ∏è <b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:</b> {technical_problem}\n"
                f'üèò <b>–ê–¥—Ä–µ—Å:</b> {user_address}\n'
                f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {organization_name}\n"
                f"üßæ <b>–ò–ù–ù:</b> {organization_itn}\n"
                f"üñº <b>–ú–µ–¥–∏–∞:</b> {media_info}"
            ),
            parse_mode=ParseMode.HTML
        )

        await callback.message.answer(
            text="‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\nüìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.",
            parse_mode=ParseMode.HTML
        )

        dialog_manager.show_mode = ShowMode.DELETE_AND_SEND

        await dialog_manager.switch_to(
            BoilerDialog.boiler_main_menu
        )

    else:
        await dialog_manager.start(
            BoilerRegistrationDialog.boiler_registration_user_name
        )


async def confirm_sending_rent_request(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    user_id = str(callback.from_user.id)
    user_data = User.get_user_by_telegram_id(user_id)

    if user_data:
        request_title = dialog_manager.dialog_data['button_click']

        user_name = user_data['name']
        user_phone = user_data['phone']
        organization_itn = user_data['organization_itn']
        organization_name = user_data['organization_name']

        user_address = dialog_manager.dialog_data.get('user_address', '‚Äî')
        user_budget = dialog_manager.dialog_data.get('user_budget', '‚Äî')
        place_format = dialog_manager.dialog_data.get('place_format', '‚Äî')
        user_rent_type = dialog_manager.dialog_data.get('user_rent_type', '‚Äî')

        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–æ–π.

        await callback.message.answer(
            text=(
                "<b>üì§ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ CRM —Å–∏—Å—Ç–µ–º—É...</b>\n\n"
                f"üîó <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:</b> {request_title}\n"
                f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_phone}\n"
                f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {organization_name}\n"
                f"üßæ <b>–ò–ù–ù:</b> {organization_itn}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {user_address}\n"
                f"üè∑ <b>–¢–∏–ø –∞—Ä–µ–Ω–¥—ã:</b> {user_rent_type}\n"
                f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {user_budget}\n"
                f"üè¨ <b>–§–æ—Ä–º–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è:</b> {place_format}"
            ),
            parse_mode=ParseMode.HTML
        )

        await callback.message.answer(
            text="‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\nüìû –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode=ParseMode.HTML
        )

        dialog_manager.show_mode = ShowMode.DELETE_AND_SEND
        await dialog_manager.switch_to(BoilerDialog.boiler_main_menu)

    else:
        await dialog_manager.start(BoilerRegistrationDialog.boiler_registration_user_name)


async def confirm_sending_barista_training(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    user_id = str(callback.from_user.id)

    user_data = User.get_user_by_telegram_id(
        user_id
    )

    if user_data:
        request_title = dialog_manager.dialog_data['button_click']
        barista_value = dialog_manager.dialog_data['barista_value']
        user_phone = user_data['phone']
        user_name = user_data['name']
        organization_itn = user_data['organization_itn']
        organization_name = user_data['organization_name']

        await callback.message.answer(
            text=(
                "<b>üì§ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ CRM —Å–∏—Å—Ç–µ–º—É...</b>\n\n"
                f"üîó <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:</b> {request_title}\n"
                f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_name}\n"
                f'üìå <b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b> {barista_value}\n'
                f'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_phone}\n'
                f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {organization_name}\n"
                f"üßæ <b>–ò–ù–ù:</b> {organization_itn}\n"

            ),
            parse_mode=ParseMode.HTML
        )

        await callback.message.answer(
            text="‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\nüìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.",
            parse_mode=ParseMode.HTML
        )

        dialog_manager.show_mode = ShowMode.DELETE_AND_SEND

        await dialog_manager.switch_to(
            BoilerDialog.boiler_main_menu
        )


    else:
        await dialog_manager.start(
            BoilerRegistrationDialog.boiler_registration_user_name
        )


async def send_feedback(
        callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    user_answer = dialog_manager.dialog_data.get('user_answer', 'ERROR')

    tg_user_id = callback.from_user.id
    user_username = callback.from_user.username
    user_first_name = callback.from_user.first_name
    user_last_name = callback.from_user.last_name

    if user_username:
        user_username = '@' + user_username
    else:
        user_username = 'Username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    if not user_first_name:
        user_first_name = '–ò–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    if not user_last_name:
        user_last_name = '–§–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    Feedback.add_feedback(
        tg_user_id=tg_user_id,
        firstname=user_first_name,
        lastname=user_last_name,
        username=user_username,
        text=user_answer
    )

    await callback.message.answer(
        text=(
            "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!</b>\n\n"
            "–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å üí¨\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üåü"
        ),
        parse_mode=ParseMode.HTML
    )

    dialog_manager.show_mode = ShowMode.DELETE_AND_SEND

    await dialog_manager.switch_to(
        BoilerDialog.boiler_main_menu
    )


async def on_technical_problem_selected(
        callback: CallbackQuery,
        widget: Any,
        dialog_manager: DialogManager,
        technical_problem_id_selected: int,
):
    technical_problem = TechnicalProblem.get_technical_problem_by_id(
        technical_problem_id=technical_problem_id_selected
    )

    if technical_problem:
        dialog_manager.dialog_data['technical_problem'] = technical_problem['name']
        await dialog_manager.switch_to(
            BoilerDialog.boiler_repair_description
        )
    else:
        await callback.message.answer(
            text=(
                "‚ùå <b>–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÑ\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º! üí¨"
            ),
            parse_mode=ParseMode.HTML
        )
        await dialog_manager.switch_to(
            BoilerDialog.boiler_main_menu
        )
